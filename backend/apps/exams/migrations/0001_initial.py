# Generated by Django 5.2.7 on 2025-10-16 15:35

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academics', '0001_initial'),
        ('classes', '0002_initial'),
        ('students', '0001_initial'),
        ('subjects', '0002_academicyear_subject_semester'),
        ('teachers', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('exam_type', models.CharField(choices=[('midterm', 'Midterm'), ('final', 'Final'), ('quiz', 'Quiz'), ('assignment', 'Assignment'), ('project', 'Project'), ('practical', 'Practical'), ('other', 'Other')], default='quiz', max_length=20)),
                ('total_marks', models.PositiveIntegerField(default=100)),
                ('duration_minutes', models.PositiveIntegerField(default=60)),
                ('passing_marks', models.PositiveIntegerField(default=40)),
                ('is_active', models.BooleanField(default=True)),
                ('allow_retake', models.BooleanField(default=False)),
                ('max_attempts', models.PositiveIntegerField(default=1)),
                ('instructions', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exams', to='academics.course')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_exams', to='teachers.teacher')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exams', to='subjects.subject')),
            ],
            options={
                'verbose_name_plural': 'Exams',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExamResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('marks_obtained', models.PositiveIntegerField()),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=5)),
                ('grade', models.CharField(blank=True, max_length=2)),
                ('is_passed', models.BooleanField(default=False)),
                ('attempt_number', models.PositiveIntegerField(default=1)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('duration_taken_minutes', models.PositiveIntegerField()),
                ('is_submitted', models.BooleanField(default=False)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('graded_at', models.DateTimeField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='exams.exam')),
                ('graded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='graded_results', to='teachers.teacher')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_results', to='students.student')),
            ],
            options={
                'verbose_name_plural': 'Exam Results',
                'ordering': ['-created_at'],
                'unique_together': {('exam', 'student', 'attempt_number')},
            },
        ),
        migrations.CreateModel(
            name='ExamSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('venue', models.CharField(blank=True, max_length=200)),
                ('room_number', models.CharField(blank=True, max_length=50)),
                ('is_online', models.BooleanField(default=False)),
                ('online_platform', models.CharField(blank=True, max_length=100)),
                ('meeting_link', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('exam', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to='exams.exam')),
                ('invigilator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invigilated_exams', to='teachers.teacher')),
            ],
            options={
                'verbose_name_plural': 'Exam Schedules',
                'ordering': ['start_date', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='ExamSettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('default_exam_duration', models.PositiveIntegerField(default=60, help_text='Default exam duration in minutes')),
                ('default_passing_percentage', models.PositiveIntegerField(default=40, help_text='Default passing percentage')),
                ('allow_exam_retakes', models.BooleanField(default=False, help_text='Allow students to retake failed exams')),
                ('max_retake_attempts', models.PositiveIntegerField(default=2, help_text='Maximum number of retake attempts')),
                ('auto_grade_objective_questions', models.BooleanField(default=True, help_text='Automatically grade objective questions')),
                ('require_teacher_approval', models.BooleanField(default=False, help_text='Require teacher approval for exam results')),
                ('send_result_notifications', models.BooleanField(default=True, help_text='Send notifications when results are published')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('class_enrolled', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='exam_settings', to='classes.class')),
            ],
            options={
                'verbose_name_plural': 'Exam Settings',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('single_choice', 'Single Choice'), ('true_false', 'True/False'), ('short_answer', 'Short Answer'), ('essay', 'Essay'), ('numerical', 'Numerical'), ('matching', 'Matching'), ('fill_blank', 'Fill in the Blank')], default='multiple_choice', max_length=20)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=10)),
                ('marks', models.PositiveIntegerField(default=1)),
                ('order', models.PositiveIntegerField()),
                ('is_required', models.BooleanField(default=True)),
                ('has_negative_marking', models.BooleanField(default=False)),
                ('negative_marks', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('explanation', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='exams.exam')),
            ],
            options={
                'verbose_name_plural': 'Questions',
                'ordering': ['exam', 'order'],
                'unique_together': {('exam', 'order')},
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('answer_text', models.TextField()),
                ('is_correct', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField()),
                ('explanation', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='exams.question')),
            ],
            options={
                'verbose_name_plural': 'Answers',
                'ordering': ['question', 'order'],
                'unique_together': {('question', 'order')},
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('total_questions', models.PositiveIntegerField(default=10)),
                ('time_limit_minutes', models.PositiveIntegerField(default=30)),
                ('passing_score', models.PositiveIntegerField(default=70)),
                ('is_randomized', models.BooleanField(default=True)),
                ('show_results_immediately', models.BooleanField(default=True)),
                ('allow_review', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='academics.course')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_quizzes', to='teachers.teacher')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='subjects.subject')),
            ],
            options={
                'verbose_name_plural': 'Quizzes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentAnswer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text_answer', models.TextField(blank=True)),
                ('numerical_answer', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('is_correct', models.BooleanField(default=False)),
                ('marks_obtained', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('time_taken_seconds', models.PositiveIntegerField(default=0)),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('exam_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_answers', to='exams.examresult')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_answers', to='exams.question')),
                ('selected_answers', models.ManyToManyField(blank=True, to='exams.answer')),
            ],
            options={
                'verbose_name_plural': 'Student Answers',
                'unique_together': {('exam_result', 'question')},
            },
        ),
    ]
