# Generated by Django 5.0 on 2025-08-28 10:11

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academics', '__first__'),
        ('classes', '0002_initial'),
        ('students', '0001_initial'),
        ('subjects', '0002_academicyear_subject_semester'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIDataSource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('source_type', models.CharField(choices=[('database', 'Database'), ('file', 'File'), ('api', 'API'), ('stream', 'Data Stream'), ('external', 'External Service')], max_length=20)),
                ('connection_config', models.JSONField(default=dict, help_text='Connection configuration')),
                ('schema_config', models.JSONField(default=dict, help_text='Data schema configuration')),
                ('data_quality_score', models.FloatField(blank=True, help_text='Data quality score (0-1)', null=True)),
                ('last_updated', models.DateTimeField(blank=True, null=True)),
                ('record_count', models.BigIntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_data_sources', to=settings.AUTH_USER_MODEL)),
                ('shared_with', models.ManyToManyField(blank=True, related_name='shared_data_sources', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI Data Source',
                'verbose_name_plural': 'AI Data Sources',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('model_type', models.CharField(choices=[('quiz_generator', 'Quiz Generator'), ('summarizer', 'Text Summarizer'), ('predictor', 'Performance Predictor'), ('anomaly_detector', 'Anomaly Detector'), ('nlq', 'Natural Language Query'), ('custom', 'Custom Model')], max_length=30)),
                ('version', models.CharField(default='1.0.0', max_length=50)),
                ('model_config', models.JSONField(default=dict, help_text='Model configuration parameters')),
                ('hyperparameters', models.JSONField(default=dict, help_text='Training hyperparameters')),
                ('model_path', models.CharField(blank=True, help_text='Path to the model file', max_length=500)),
                ('accuracy', models.FloatField(blank=True, help_text='Model accuracy score', null=True)),
                ('precision', models.FloatField(blank=True, help_text='Model precision score', null=True)),
                ('recall', models.FloatField(blank=True, help_text='Model recall score', null=True)),
                ('f1_score', models.FloatField(blank=True, help_text='Model F1 score', null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('training', 'Training'), ('inactive', 'Inactive'), ('error', 'Error')], default='inactive', max_length=20)),
                ('is_active', models.BooleanField(default=False)),
                ('last_trained', models.DateTimeField(blank=True, null=True)),
                ('training_duration', models.DurationField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_ai_models', to=settings.AUTH_USER_MODEL)),
                ('shared_with', models.ManyToManyField(blank=True, related_name='shared_ai_models', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI Model',
                'verbose_name_plural': 'AI Models',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AILessonSummarizer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('summary_type', models.CharField(choices=[('brief', 'Brief Summary'), ('detailed', 'Detailed Summary'), ('key_points', 'Key Points'), ('outline', 'Lesson Outline'), ('custom', 'Custom Format')], default='detailed', max_length=20)),
                ('summary_content', models.TextField()),
                ('key_points', models.JSONField(default=list, help_text='List of key points from the lesson')),
                ('vocabulary', models.JSONField(default=list, help_text='Important vocabulary terms')),
                ('generation_params', models.JSONField(default=dict, help_text='Parameters used for summary generation')),
                ('readability_score', models.FloatField(blank=True, help_text='Readability score of the summary', null=True)),
                ('coherence_score', models.FloatField(blank=True, help_text='Coherence score of the summary', null=True)),
                ('is_generated', models.BooleanField(default=False)),
                ('generation_status', models.CharField(choices=[('active', 'Active'), ('training', 'Training'), ('inactive', 'Inactive'), ('error', 'Error')], default='inactive', max_length=20)),
                ('generated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_summaries', to=settings.AUTH_USER_MODEL)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_summaries', to='academics.lesson')),
                ('shared_with', models.ManyToManyField(blank=True, related_name='shared_summaries', to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_summaries', to='subjects.subject')),
                ('ai_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_summaries', to='ai_tools.aimodel')),
            ],
            options={
                'verbose_name': 'AI Lesson Summarizer',
                'verbose_name_plural': 'AI Lesson Summarizers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIAttendanceAnomalyDetector',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('anomaly_type', models.CharField(choices=[('sudden_drop', 'Sudden Drop'), ('pattern_change', 'Pattern Change'), ('seasonal_variation', 'Seasonal Variation'), ('peer_comparison', 'Peer Comparison'), ('external_factors', 'External Factors')], max_length=20)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('confidence_score', models.FloatField(help_text='Confidence in anomaly detection (0-1)')),
                ('detection_date', models.DateField()),
                ('attendance_rate', models.FloatField(help_text='Current attendance rate')),
                ('historical_average', models.FloatField(help_text='Historical average attendance rate')),
                ('deviation', models.FloatField(help_text='Deviation from historical average')),
                ('contributing_factors', models.JSONField(default=list, help_text='Factors contributing to the anomaly')),
                ('pattern_analysis', models.JSONField(default=dict, help_text='Pattern analysis data')),
                ('peer_comparison', models.JSONField(default=dict, help_text='Comparison with peer group')),
                ('detection_params', models.JSONField(default=dict, help_text='Parameters used for anomaly detection')),
                ('recommendations', models.JSONField(default=list, help_text='Recommended actions')),
                ('intervention_needed', models.BooleanField(default=False)),
                ('intervention_actions', models.JSONField(default=list, help_text='Specific intervention actions')),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolution_date', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('class_enrolled', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_anomalies', to='classes.class')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_anomalies', to='students.student')),
                ('ai_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='attendance_anomalies', to='ai_tools.aimodel')),
            ],
            options={
                'verbose_name': 'AI Attendance Anomaly Detector',
                'verbose_name_plural': 'AI Attendance Anomaly Detectors',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AINaturalLanguageQuery',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('query_text', models.TextField(help_text='Natural language query from user')),
                ('query_type', models.CharField(choices=[('academic', 'Academic Query'), ('attendance', 'Attendance Query'), ('financial', 'Financial Query'), ('analytics', 'Analytics Query'), ('general', 'General Query')], max_length=20)),
                ('intent', models.CharField(blank=True, help_text='Detected intent of the query', max_length=100)),
                ('processed_query', models.JSONField(default=dict, help_text='Processed query structure')),
                ('sql_query', models.TextField(blank=True, help_text='Generated SQL query')),
                ('parameters', models.JSONField(default=dict, help_text='Query parameters')),
                ('result_data', models.JSONField(default=dict, help_text='Query results')),
                ('result_summary', models.TextField(blank=True, help_text='Natural language summary of results')),
                ('visualization_config', models.JSONField(default=dict, help_text='Configuration for result visualization')),
                ('processing_params', models.JSONField(default=dict, help_text='Parameters used for query processing')),
                ('processing_time', models.DurationField(blank=True, null=True)),
                ('confidence_score', models.FloatField(blank=True, null=True)),
                ('accuracy_score', models.FloatField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True, help_text='Error message if processing failed')),
                ('user_rating', models.IntegerField(blank=True, help_text='User rating (1-5)', null=True)),
                ('user_feedback', models.TextField(blank=True, help_text='User feedback on results')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ai_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nlq_queries', to='ai_tools.aimodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nlq_queries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI Natural Language Query',
                'verbose_name_plural': 'AI Natural Language Queries',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIPerformancePredictor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('prediction_type', models.CharField(choices=[('exam_score', 'Exam Score'), ('course_grade', 'Course Grade'), ('attendance_risk', 'Attendance Risk'), ('dropout_risk', 'Dropout Risk'), ('career_path', 'Career Path'), ('learning_style', 'Learning Style')], max_length=20)),
                ('predicted_value', models.FloatField(help_text='Predicted score or probability')),
                ('confidence_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very_high', 'Very High')], max_length=20)),
                ('confidence_score', models.FloatField(help_text='Confidence score (0-1)')),
                ('input_features', models.JSONField(default=dict, help_text='Features used for prediction')),
                ('feature_importance', models.JSONField(default=dict, help_text='Feature importance scores')),
                ('generation_params', models.JSONField(default=dict, help_text='Parameters used for prediction')),
                ('recommendations', models.JSONField(default=list, help_text='AI-generated recommendations')),
                ('intervention_needed', models.BooleanField(default=False)),
                ('intervention_urgency', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very_high', 'Very High')], default='medium', max_length=20)),
                ('actual_value', models.FloatField(blank=True, help_text='Actual value when available', null=True)),
                ('prediction_accuracy', models.FloatField(blank=True, help_text='Accuracy of prediction', null=True)),
                ('academic_year', models.IntegerField(default=2025)),
                ('semester', models.CharField(default='1', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ai_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performance_predictions', to='ai_tools.aimodel')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_predictions', to='students.student')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ai_predictions', to='subjects.subject')),
            ],
            options={
                'verbose_name': 'AI Performance Predictor',
                'verbose_name_plural': 'AI Performance Predictors',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIQuizGenerator',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('syllabus_topic', models.CharField(blank=True, max_length=200)),
                ('content_source', models.TextField(help_text='Source content for quiz generation')),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('expert', 'Expert')], default='medium', max_length=20)),
                ('question_count', models.IntegerField(default=10)),
                ('time_limit', models.IntegerField(default=30, help_text='Time limit in minutes')),
                ('generation_params', models.JSONField(default=dict, help_text='Parameters used for quiz generation')),
                ('is_generated', models.BooleanField(default=False)),
                ('generation_status', models.CharField(choices=[('active', 'Active'), ('training', 'Training'), ('inactive', 'Inactive'), ('error', 'Error')], default='inactive', max_length=20)),
                ('generated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ai_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_quizzes', to='ai_tools.aimodel')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_quizzes', to=settings.AUTH_USER_MODEL)),
                ('shared_with', models.ManyToManyField(blank=True, related_name='shared_quizzes', to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_quizzes', to='subjects.subject')),
            ],
            options={
                'verbose_name': 'AI Quiz Generator',
                'verbose_name_plural': 'AI Quiz Generators',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False'), ('short_answer', 'Short Answer'), ('essay', 'Essay'), ('matching', 'Matching'), ('fill_blank', 'Fill in the Blank')], max_length=20)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('expert', 'Expert')], max_length=20)),
                ('options', models.JSONField(default=list, help_text='Multiple choice options')),
                ('correct_answer', models.TextField(help_text='Correct answer or answer key')),
                ('explanation', models.TextField(blank=True, help_text='Explanation for the correct answer')),
                ('points', models.IntegerField(default=1, help_text='Points for this question')),
                ('order', models.IntegerField(default=0, help_text='Question order in quiz')),
                ('confidence_score', models.FloatField(blank=True, help_text='AI confidence in this question', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ai_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_tools.aimodel')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='ai_tools.aiquizgenerator')),
            ],
            options={
                'verbose_name': 'AI Question',
                'verbose_name_plural': 'AI Questions',
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='AITrainingJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('training_config', models.JSONField(default=dict, help_text='Training configuration')),
                ('dataset_config', models.JSONField(default=dict, help_text='Dataset configuration')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('progress', models.IntegerField(default=0, help_text='Training progress percentage')),
                ('current_epoch', models.IntegerField(default=0)),
                ('total_epochs', models.IntegerField(default=0)),
                ('training_metrics', models.JSONField(default=dict, help_text='Training metrics over time')),
                ('validation_metrics', models.JSONField(default=dict, help_text='Validation metrics over time')),
                ('final_metrics', models.JSONField(default=dict, help_text='Final model metrics')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('gpu_usage', models.FloatField(blank=True, help_text='GPU usage percentage', null=True)),
                ('memory_usage', models.FloatField(blank=True, help_text='Memory usage in GB', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if training failed')),
                ('logs', models.TextField(blank=True, help_text='Training logs')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ai_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_jobs', to='ai_tools.aimodel')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_training_jobs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI Training Job',
                'verbose_name_plural': 'AI Training Jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIUsageLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('tool_type', models.CharField(choices=[('quiz_generator', 'Quiz Generator'), ('summarizer', 'Lesson Summarizer'), ('predictor', 'Performance Predictor'), ('anomaly_detector', 'Anomaly Detector'), ('nlq', 'Natural Language Query'), ('custom', 'Custom Tool')], max_length=30)),
                ('input_data', models.JSONField(default=dict, help_text='Input data provided to AI tool')),
                ('output_data', models.JSONField(default=dict, help_text='Output data from AI tool')),
                ('processing_time', models.DurationField(blank=True, null=True)),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if failed')),
                ('user_satisfaction', models.IntegerField(blank=True, help_text='User satisfaction rating (1-5)', null=True)),
                ('model_version', models.CharField(blank=True, max_length=50)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('session_id', models.CharField(blank=True, max_length=100)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ai_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_tools.aimodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_usage_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI Usage Log',
                'verbose_name_plural': 'AI Usage Logs',
                'ordering': ['-timestamp'],
            },
        ),
    ]
