# Generated by Django 5.0 on 2025-08-23 11:34

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academic_years', '0001_initial'),
        ('classes', '0001_initial'),
        ('tenants', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(max_length=20, unique=True, verbose_name='Student ID')),
                ('admission_number', models.CharField(max_length=20, unique=True, verbose_name='Admission Number')),
                ('first_name', models.CharField(max_length=50, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=50, verbose_name='Last Name')),
                ('middle_name', models.CharField(blank=True, max_length=50, verbose_name='Middle Name')),
                ('date_of_birth', models.DateField(verbose_name='Date of Birth')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1, verbose_name='Gender')),
                ('blood_group', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=3, verbose_name='Blood Group')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('phone', models.CharField(blank=True, max_length=15, verbose_name='Phone')),
                ('address', models.TextField(verbose_name='Address')),
                ('city', models.CharField(max_length=50, verbose_name='City')),
                ('state', models.CharField(max_length=50, verbose_name='State')),
                ('postal_code', models.CharField(max_length=10, verbose_name='Postal Code')),
                ('country', models.CharField(default='Bangladesh', max_length=50, verbose_name='Country')),
                ('admission_date', models.DateField(verbose_name='Admission Date')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('graduated', 'Graduated'), ('transferred', 'Transferred'), ('suspended', 'Suspended'), ('expelled', 'Expelled')], default='active', max_length=20, verbose_name='Status')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('academic_year', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='academic_years.academicyear', verbose_name='Academic Year')),
                ('current_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='classes.class', verbose_name='Current Class')),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='students', to='tenants.tenant', verbose_name='Tenant')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
                'ordering': ['first_name', 'last_name'],
            },
        ),
        migrations.CreateModel(
            name='StudentAcademicRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_marks', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Total Marks')),
                ('obtained_marks', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Obtained Marks')),
                ('percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Percentage')),
                ('grade', models.CharField(blank=True, max_length=2, verbose_name='Grade')),
                ('rank', models.PositiveIntegerField(blank=True, null=True, verbose_name='Rank')),
                ('total_days', models.PositiveIntegerField(default=0, verbose_name='Total Days')),
                ('present_days', models.PositiveIntegerField(default=0, verbose_name='Present Days')),
                ('attendance_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Attendance Percentage')),
                ('is_promoted', models.BooleanField(default=False, verbose_name='Is Promoted')),
                ('promotion_date', models.DateField(blank=True, null=True, verbose_name='Promotion Date')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academic_years.academicyear', verbose_name='Academic Year')),
                ('class_enrolled', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classes.class', verbose_name='Class Enrolled')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='academic_records', to='students.student')),
            ],
            options={
                'verbose_name': 'Student Academic Record',
                'verbose_name_plural': 'Student Academic Records',
                'ordering': ['-academic_year', '-percentage'],
            },
        ),
        migrations.CreateModel(
            name='StudentAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('achievement_type', models.CharField(choices=[('academic', 'Academic'), ('sports', 'Sports'), ('cultural', 'Cultural'), ('leadership', 'Leadership'), ('community_service', 'Community Service'), ('competition', 'Competition'), ('other', 'Other')], max_length=20, verbose_name='Achievement Type')),
                ('level', models.CharField(choices=[('school', 'School'), ('district', 'District'), ('state', 'State'), ('national', 'National'), ('international', 'International')], max_length=20, verbose_name='Level')),
                ('date_achieved', models.DateField(verbose_name='Date Achieved')),
                ('position', models.CharField(blank=True, max_length=50, verbose_name='Position/Rank')),
                ('prize_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Prize Amount')),
                ('certificate', models.FileField(blank=True, upload_to='students/achievements/', verbose_name='Certificate')),
                ('certificate_number', models.CharField(blank=True, max_length=100, verbose_name='Certificate Number')),
                ('issuing_authority', models.CharField(blank=True, max_length=200, verbose_name='Issuing Authority')),
                ('points_awarded', models.PositiveIntegerField(default=0, verbose_name='Points Awarded')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Is Verified')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to='students.student')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Verified By')),
            ],
            options={
                'verbose_name': 'Student Achievement',
                'verbose_name_plural': 'Student Achievements',
                'ordering': ['-date_achieved'],
            },
        ),
        migrations.CreateModel(
            name='StudentDiscipline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discipline_type', models.CharField(choices=[('warning', 'Warning'), ('reprimand', 'Reprimand'), ('detention', 'Detention'), ('suspension', 'Suspension'), ('expulsion', 'Expulsion'), ('other', 'Other')], max_length=20, verbose_name='Discipline Type')),
                ('severity', models.CharField(choices=[('minor', 'Minor'), ('moderate', 'Moderate'), ('major', 'Major'), ('severe', 'Severe')], max_length=20, verbose_name='Severity')),
                ('incident_date', models.DateField(verbose_name='Incident Date')),
                ('incident_description', models.TextField(verbose_name='Incident Description')),
                ('violation', models.CharField(max_length=200, verbose_name='Violation')),
                ('action_taken', models.TextField(verbose_name='Action Taken')),
                ('duration', models.CharField(blank=True, max_length=50, verbose_name='Duration')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('witnesses', models.TextField(blank=True, verbose_name='Witnesses')),
                ('is_resolved', models.BooleanField(default=False, verbose_name='Is Resolved')),
                ('resolution_date', models.DateField(blank=True, null=True, verbose_name='Resolution Date')),
                ('resolution_notes', models.TextField(blank=True, verbose_name='Resolution Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('reported_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Reported By')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disciplinary_records', to='students.student')),
            ],
            options={
                'verbose_name': 'Student Discipline',
                'verbose_name_plural': 'Student Disciplines',
                'ordering': ['-incident_date'],
            },
        ),
        migrations.CreateModel(
            name='StudentDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('birth_certificate', 'Birth Certificate'), ('admission_form', 'Admission Form'), ('transfer_certificate', 'Transfer Certificate'), ('character_certificate', 'Character Certificate'), ('medical_certificate', 'Medical Certificate'), ('income_certificate', 'Income Certificate'), ('caste_certificate', 'Caste Certificate'), ('disability_certificate', 'Disability Certificate'), ('other', 'Other')], max_length=30, verbose_name='Document Type')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('file', models.FileField(upload_to='students/documents/', verbose_name='File')),
                ('file_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='File Size (bytes)')),
                ('file_type', models.CharField(blank=True, max_length=50, verbose_name='File Type')),
                ('issue_date', models.DateField(blank=True, null=True, verbose_name='Issue Date')),
                ('expiry_date', models.DateField(blank=True, null=True, verbose_name='Expiry Date')),
                ('issuing_authority', models.CharField(blank=True, max_length=200, verbose_name='Issuing Authority')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Is Verified')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='students.student')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Verified By')),
            ],
            options={
                'verbose_name': 'Student Document',
                'verbose_name_plural': 'Student Documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentGuardian',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship', models.CharField(choices=[('father', 'Father'), ('mother', 'Mother'), ('guardian', 'Guardian'), ('grandfather', 'Grandfather'), ('grandmother', 'Grandmother'), ('uncle', 'Uncle'), ('aunt', 'Aunt'), ('other', 'Other')], max_length=20, verbose_name='Relationship')),
                ('first_name', models.CharField(max_length=50, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=50, verbose_name='Last Name')),
                ('middle_name', models.CharField(blank=True, max_length=50, verbose_name='Middle Name')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('phone', models.CharField(max_length=15, verbose_name='Phone')),
                ('alternate_phone', models.CharField(blank=True, max_length=15, verbose_name='Alternate Phone')),
                ('address', models.TextField(verbose_name='Address')),
                ('city', models.CharField(max_length=50, verbose_name='City')),
                ('state', models.CharField(max_length=50, verbose_name='State')),
                ('postal_code', models.CharField(max_length=10, verbose_name='Postal Code')),
                ('occupation', models.CharField(blank=True, max_length=100, verbose_name='Occupation')),
                ('employer', models.CharField(blank=True, max_length=100, verbose_name='Employer')),
                ('annual_income', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Annual Income')),
                ('is_primary_guardian', models.BooleanField(default=False, verbose_name='Is Primary Guardian')),
                ('is_emergency_contact', models.BooleanField(default=False, verbose_name='Is Emergency Contact')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='guardians', to='students.student')),
            ],
            options={
                'verbose_name': 'Student Guardian',
                'verbose_name_plural': 'Student Guardians',
                'ordering': ['-is_primary_guardian', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', models.ImageField(blank=True, upload_to='students/profiles/', verbose_name='Profile Picture')),
                ('emergency_contact', models.CharField(blank=True, max_length=15, verbose_name='Emergency Contact')),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100, verbose_name='Emergency Contact Name')),
                ('emergency_contact_relation', models.CharField(blank=True, max_length=50, verbose_name='Emergency Contact Relation')),
                ('medical_conditions', models.TextField(blank=True, verbose_name='Medical Conditions')),
                ('allergies', models.TextField(blank=True, verbose_name='Allergies')),
                ('medications', models.TextField(blank=True, verbose_name='Current Medications')),
                ('hobbies', models.TextField(blank=True, verbose_name='Hobbies')),
                ('achievements', models.TextField(blank=True, verbose_name='Achievements')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='students.student')),
            ],
            options={
                'verbose_name': 'Student Profile',
                'verbose_name_plural': 'Student Profiles',
            },
        ),
        migrations.CreateModel(
            name='StudentSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Email Notifications')),
                ('sms_notifications', models.BooleanField(default=True, verbose_name='SMS Notifications')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='Push Notifications')),
                ('profile_visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('friends_only', 'Friends Only')], default='public', max_length=20, verbose_name='Profile Visibility')),
                ('grade_notifications', models.BooleanField(default=True, verbose_name='Grade Notifications')),
                ('attendance_notifications', models.BooleanField(default=True, verbose_name='Attendance Notifications')),
                ('assignment_notifications', models.BooleanField(default=True, verbose_name='Assignment Notifications')),
                ('allow_teacher_messages', models.BooleanField(default=True, verbose_name='Allow Teacher Messages')),
                ('allow_guardian_messages', models.BooleanField(default=True, verbose_name='Allow Guardian Messages')),
                ('allow_class_messages', models.BooleanField(default=True, verbose_name='Allow Class Messages')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='students.student')),
            ],
            options={
                'verbose_name': 'Student Settings',
                'verbose_name_plural': 'Student Settings',
            },
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['student_id'], name='students_st_student_e7126a_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['admission_number'], name='students_st_admissi_321db4_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['status'], name='students_st_status_5e2210_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['current_class'], name='students_st_current_ad0594_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='studentacademicrecord',
            unique_together={('student', 'academic_year', 'class_enrolled')},
        ),
    ]
