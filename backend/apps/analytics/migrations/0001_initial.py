# Generated by Django 5.2.7 on 2025-10-16 15:35

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('classes', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExamAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_students', models.PositiveIntegerField()),
                ('average_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('highest_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('lowest_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('median_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('grade_distribution', models.JSONField(default=dict)),
                ('pass_rate', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('question_analysis', models.JSONField(default=list)),
                ('time_analysis', models.JSONField(default=dict)),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=20)),
                ('recommendations', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Exam Analytics',
                'verbose_name_plural': 'Exam Analytics',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LearningAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('study_time', models.PositiveIntegerField(default=0)),
                ('resources_accessed', models.JSONField(default=list)),
                ('learning_path_progress', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('engagement_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('participation_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=20)),
                ('learning_style', models.CharField(choices=[('visual', 'Visual'), ('auditory', 'Auditory'), ('kinesthetic', 'Kinesthetic'), ('reading', 'Reading/Writing')], default='visual', max_length=20)),
                ('skill_levels', models.JSONField(default=dict)),
                ('knowledge_gaps', models.JSONField(default=list)),
                ('learning_objectives', models.JSONField(default=list)),
                ('recommended_resources', models.JSONField(default=list)),
                ('study_suggestions', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Learning Analytics',
                'verbose_name_plural': 'Learning Analytics',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='PredictiveAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('predicted_gpa', models.DecimalField(decimal_places=2, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)])),
                ('graduation_probability', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('dropout_risk', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('career_recommendations', models.JSONField(default=list)),
                ('skill_gaps', models.JSONField(default=list)),
                ('development_areas', models.JSONField(default=list)),
                ('course_recommendations', models.JSONField(default=list)),
                ('subject_performance_predictions', models.JSONField(default=dict)),
                ('intervention_needed', models.BooleanField(default=False)),
                ('intervention_type', models.CharField(blank=True, max_length=50)),
                ('intervention_priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='low', max_length=20)),
                ('model_version', models.CharField(default='1.0', max_length=20)),
                ('confidence_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Predictive Analytics',
                'verbose_name_plural': 'Predictive Analytics',
                'ordering': ['-last_updated'],
            },
        ),
        migrations.CreateModel(
            name='StudentPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.CharField(max_length=10)),
                ('semester', models.CharField(max_length=20)),
                ('attendance_rate', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('average_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('total_assignments', models.PositiveIntegerField(default=0)),
                ('completed_assignments', models.PositiveIntegerField(default=0)),
                ('exam_scores', models.JSONField(default=list)),
                ('participation_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('predicted_grade', models.CharField(blank=True, max_length=2)),
                ('risk_level', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk')], default='low', max_length=20)),
                ('improvement_areas', models.JSONField(default=list)),
                ('recommendations', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Student Performance',
                'verbose_name_plural': 'Student Performances',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='SystemUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=100)),
                ('login_time', models.DateTimeField()),
                ('logout_time', models.DateTimeField(blank=True, null=True)),
                ('session_duration', models.PositiveIntegerField(default=0)),
                ('pages_visited', models.JSONField(default=list)),
                ('actions_performed', models.JSONField(default=list)),
                ('features_used', models.JSONField(default=list)),
                ('user_agent', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('device_type', models.CharField(choices=[('desktop', 'Desktop'), ('tablet', 'Tablet'), ('mobile', 'Mobile')], default='desktop', max_length=20)),
                ('page_load_times', models.JSONField(default=dict)),
                ('errors_encountered', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'System Usage',
                'verbose_name_plural': 'System Usage',
                'ordering': ['-login_time'],
            },
        ),
        migrations.CreateModel(
            name='AnalyticsDashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('widgets', models.JSONField(default=list)),
                ('layout', models.JSONField(default=dict)),
                ('filters', models.JSONField(default=dict)),
                ('is_public', models.BooleanField(default=False)),
                ('allowed_roles', models.JSONField(default=list)),
                ('refresh_interval', models.PositiveIntegerField(default=300)),
                ('auto_refresh', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('allowed_users', models.ManyToManyField(blank=True, related_name='accessible_dashboards', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_analytics_dashboards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Analytics Dashboard',
                'verbose_name_plural': 'Analytics Dashboards',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AttendanceAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('total_students', models.PositiveIntegerField()),
                ('present_count', models.PositiveIntegerField()),
                ('absent_count', models.PositiveIntegerField()),
                ('late_count', models.PositiveIntegerField(default=0)),
                ('excused_count', models.PositiveIntegerField(default=0)),
                ('attendance_rate', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('absence_rate', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('trend_direction', models.CharField(choices=[('improving', 'Improving'), ('declining', 'Declining'), ('stable', 'Stable')], default='stable', max_length=10)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('class_room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_analytics', to='classes.class')),
            ],
            options={
                'verbose_name': 'Attendance Analytics',
                'verbose_name_plural': 'Attendance Analytics',
                'ordering': ['-date'],
            },
        ),
    ]
