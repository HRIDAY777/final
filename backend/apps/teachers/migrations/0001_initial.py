# Generated by Django 5.0 on 2025-08-23 11:34

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academic_years', '0001_initial'),
        ('classes', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teacher_id', models.CharField(max_length=20, unique=True, verbose_name='Teacher ID')),
                ('employee_number', models.CharField(max_length=20, unique=True, verbose_name='Employee Number')),
                ('first_name', models.CharField(max_length=50, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=50, verbose_name='Last Name')),
                ('middle_name', models.CharField(blank=True, max_length=50, verbose_name='Middle Name')),
                ('date_of_birth', models.DateField(verbose_name='Date of Birth')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1, verbose_name='Gender')),
                ('blood_group', models.CharField(blank=True, max_length=5, verbose_name='Blood Group')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('phone', models.CharField(max_length=15, verbose_name='Phone')),
                ('address', models.TextField(verbose_name='Address')),
                ('city', models.CharField(max_length=50, verbose_name='City')),
                ('state', models.CharField(max_length=50, verbose_name='State')),
                ('postal_code', models.CharField(max_length=10, verbose_name='Postal Code')),
                ('country', models.CharField(default='Bangladesh', max_length=50, verbose_name='Country')),
                ('joining_date', models.DateField(verbose_name='Joining Date')),
                ('employment_type', models.CharField(choices=[('full_time', 'Full Time'), ('part_time', 'Part Time'), ('contract', 'Contract'), ('visiting', 'Visiting')], default='full_time', max_length=20, verbose_name='Employment Type')),
                ('designation', models.CharField(max_length=100, verbose_name='Designation')),
                ('department', models.CharField(max_length=100, verbose_name='Department')),
                ('qualification', models.CharField(max_length=100, verbose_name='Highest Qualification')),
                ('specialization', models.CharField(blank=True, max_length=200, verbose_name='Specialization')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended'), ('resigned', 'Resigned'), ('retired', 'Retired')], default='active', max_length=20, verbose_name='Status')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Teacher',
                'verbose_name_plural': 'Teachers',
                'ordering': ['first_name', 'last_name'],
            },
        ),
        migrations.CreateModel(
            name='TeacherAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date')),
                ('status', models.CharField(choices=[('present', 'Present'), ('absent', 'Absent'), ('late', 'Late'), ('half_day', 'Half Day'), ('leave', 'On Leave')], default='present', max_length=20, verbose_name='Status')),
                ('check_in_time', models.TimeField(blank=True, null=True, verbose_name='Check In Time')),
                ('check_out_time', models.TimeField(blank=True, null=True, verbose_name='Check Out Time')),
                ('working_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Working Hours')),
                ('remarks', models.TextField(blank=True, verbose_name='Remarks')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='teachers.teacher')),
            ],
            options={
                'verbose_name': 'Teacher Attendance',
                'verbose_name_plural': 'Teacher Attendance',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='TeacherClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('class_teacher', 'Class Teacher'), ('subject_teacher', 'Subject Teacher'), ('assistant_teacher', 'Assistant Teacher')], default='subject_teacher', max_length=20, verbose_name='Role')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academic_years.academicyear', verbose_name='Academic Year')),
                ('class_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classes.class', verbose_name='Class')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='teachers.teacher')),
            ],
            options={
                'verbose_name': 'Teacher Class',
                'verbose_name_plural': 'Teacher Classes',
            },
        ),
        migrations.CreateModel(
            name='TeacherDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('cv_resume', 'CV/Resume'), ('educational_certificate', 'Educational Certificate'), ('experience_certificate', 'Experience Certificate'), ('id_proof', 'ID Proof'), ('address_proof', 'Address Proof'), ('medical_certificate', 'Medical Certificate'), ('police_verification', 'Police Verification'), ('contract_agreement', 'Contract Agreement'), ('other', 'Other')], max_length=30, verbose_name='Document Type')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('file', models.FileField(upload_to='teachers/documents/', verbose_name='File')),
                ('file_size', models.PositiveIntegerField(blank=True, verbose_name='File Size (bytes)')),
                ('file_type', models.CharField(blank=True, max_length=20, verbose_name='File Type')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('expiry_date', models.DateField(blank=True, null=True, verbose_name='Expiry Date')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Is Verified')),
                ('verified_date', models.DateTimeField(blank=True, null=True, verbose_name='Verified Date')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='teachers.teacher')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_teacher_documents', to=settings.AUTH_USER_MODEL, verbose_name='Verified By')),
            ],
            options={
                'verbose_name': 'Teacher Document',
                'verbose_name_plural': 'Teacher Documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TeacherExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.CharField(max_length=200, verbose_name='Organization')),
                ('position', models.CharField(max_length=100, verbose_name='Position')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('is_current', models.BooleanField(default=False, verbose_name='Is Current Position')),
                ('description', models.TextField(blank=True, verbose_name='Job Description')),
                ('achievements', models.TextField(blank=True, verbose_name='Achievements')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experiences', to='teachers.teacher')),
            ],
            options={
                'verbose_name': 'Teacher Experience',
                'verbose_name_plural': 'Teacher Experiences',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='TeacherLeave',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leave_type', models.CharField(choices=[('casual', 'Casual Leave'), ('sick', 'Sick Leave'), ('annual', 'Annual Leave'), ('maternity', 'Maternity Leave'), ('paternity', 'Paternity Leave'), ('study', 'Study Leave'), ('other', 'Other')], max_length=20, verbose_name='Leave Type')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(verbose_name='End Date')),
                ('total_days', models.PositiveIntegerField(verbose_name='Total Days')),
                ('reason', models.TextField(verbose_name='Reason')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], default='pending', max_length=20, verbose_name='Status')),
                ('approved_date', models.DateTimeField(blank=True, null=True, verbose_name='Approved Date')),
                ('remarks', models.TextField(blank=True, verbose_name='Remarks')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_teacher_leaves', to=settings.AUTH_USER_MODEL, verbose_name='Approved By')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaves', to='teachers.teacher')),
            ],
            options={
                'verbose_name': 'Teacher Leave',
                'verbose_name_plural': 'Teacher Leaves',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='TeacherPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evaluation_period', models.CharField(choices=[('quarterly', 'Quarterly'), ('semester', 'Semester'), ('annual', 'Annual')], max_length=20, verbose_name='Evaluation Period')),
                ('evaluation_date', models.DateField(verbose_name='Evaluation Date')),
                ('teaching_quality', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Teaching Quality')),
                ('student_engagement', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Student Engagement')),
                ('classroom_management', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Classroom Management')),
                ('communication_skills', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Communication Skills')),
                ('professional_development', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Professional Development')),
                ('teamwork', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Teamwork')),
                ('attendance_punctuality', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Attendance & Punctuality')),
                ('overall_score', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Overall Score')),
                ('grade', models.CharField(max_length=2, verbose_name='Grade')),
                ('strengths', models.TextField(blank=True, verbose_name='Strengths')),
                ('areas_for_improvement', models.TextField(blank=True, verbose_name='Areas for Improvement')),
                ('recommendations', models.TextField(blank=True, verbose_name='Recommendations')),
                ('evaluator_comments', models.TextField(blank=True, verbose_name='Evaluator Comments')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academic_years.academicyear', verbose_name='Academic Year')),
                ('evaluated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teacher_evaluations', to=settings.AUTH_USER_MODEL, verbose_name='Evaluated By')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_records', to='teachers.teacher')),
            ],
            options={
                'verbose_name': 'Teacher Performance',
                'verbose_name_plural': 'Teacher Performance',
                'ordering': ['-evaluation_date'],
            },
        ),
        migrations.CreateModel(
            name='TeacherProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', models.ImageField(blank=True, upload_to='teachers/profiles/', verbose_name='Profile Picture')),
                ('emergency_contact', models.CharField(blank=True, max_length=15, verbose_name='Emergency Contact')),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100, verbose_name='Emergency Contact Name')),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50, verbose_name='Emergency Contact Relationship')),
                ('marital_status', models.CharField(blank=True, choices=[('single', 'Single'), ('married', 'Married'), ('divorced', 'Divorced'), ('widowed', 'Widowed')], max_length=20, verbose_name='Marital Status')),
                ('spouse_name', models.CharField(blank=True, max_length=100, verbose_name='Spouse Name')),
                ('children_count', models.PositiveIntegerField(default=0, verbose_name='Number of Children')),
                ('teaching_experience_years', models.PositiveIntegerField(default=0, verbose_name='Teaching Experience (Years)')),
                ('previous_schools', models.TextField(blank=True, verbose_name='Previous Schools')),
                ('achievements', models.TextField(blank=True, verbose_name='Achievements')),
                ('publications', models.TextField(blank=True, verbose_name='Publications')),
                ('research_interests', models.TextField(blank=True, verbose_name='Research Interests')),
                ('linkedin_profile', models.URLField(blank=True, verbose_name='LinkedIn Profile')),
                ('twitter_profile', models.URLField(blank=True, verbose_name='Twitter Profile')),
                ('personal_website', models.URLField(blank=True, verbose_name='Personal Website')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('teacher', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='teachers.teacher')),
            ],
            options={
                'verbose_name': 'Teacher Profile',
                'verbose_name_plural': 'Teacher Profiles',
            },
        ),
        migrations.CreateModel(
            name='TeacherQualification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('degree', models.CharField(max_length=100, verbose_name='Degree')),
                ('institution', models.CharField(max_length=200, verbose_name='Institution')),
                ('field_of_study', models.CharField(max_length=100, verbose_name='Field of Study')),
                ('completion_year', models.PositiveIntegerField(verbose_name='Completion Year')),
                ('grade_cgpa', models.CharField(blank=True, max_length=20, verbose_name='Grade/CGPA')),
                ('certificate', models.FileField(blank=True, upload_to='teachers/qualifications/', verbose_name='Certificate')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Is Verified')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='qualifications', to='teachers.teacher')),
            ],
            options={
                'verbose_name': 'Teacher Qualification',
                'verbose_name_plural': 'Teacher Qualifications',
                'ordering': ['-completion_year'],
            },
        ),
        migrations.CreateModel(
            name='TeacherSalary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='Month')),
                ('year', models.PositiveIntegerField(verbose_name='Year')),
                ('basic_salary', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Basic Salary')),
                ('house_rent_allowance', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='House Rent Allowance')),
                ('medical_allowance', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Medical Allowance')),
                ('transport_allowance', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Transport Allowance')),
                ('other_allowances', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Other Allowances')),
                ('gross_salary', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Gross Salary')),
                ('provident_fund', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Provident Fund')),
                ('tax_deduction', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Tax Deduction')),
                ('other_deductions', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Other Deductions')),
                ('total_deductions', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Total Deductions')),
                ('net_salary', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Net Salary')),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('partial', 'Partial')], default='pending', max_length=20, verbose_name='Payment Status')),
                ('payment_date', models.DateField(blank=True, null=True, verbose_name='Payment Date')),
                ('payment_method', models.CharField(blank=True, max_length=50, verbose_name='Payment Method')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='salaries', to='teachers.teacher')),
            ],
            options={
                'verbose_name': 'Teacher Salary',
                'verbose_name_plural': 'Teacher Salaries',
                'ordering': ['-year', '-month'],
            },
        ),
        migrations.CreateModel(
            name='TeacherSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Email Notifications')),
                ('sms_notifications', models.BooleanField(default=True, verbose_name='SMS Notifications')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='Push Notifications')),
                ('attendance_notifications', models.BooleanField(default=True, verbose_name='Attendance Notifications')),
                ('leave_notifications', models.BooleanField(default=True, verbose_name='Leave Notifications')),
                ('salary_notifications', models.BooleanField(default=True, verbose_name='Salary Notifications')),
                ('performance_notifications', models.BooleanField(default=True, verbose_name='Performance Notifications')),
                ('event_notifications', models.BooleanField(default=True, verbose_name='Event Notifications')),
                ('profile_visibility', models.CharField(choices=[('public', 'Public'), ('staff_only', 'Staff Only'), ('private', 'Private')], default='staff_only', max_length=20, verbose_name='Profile Visibility')),
                ('theme_preference', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark'), ('auto', 'Auto')], default='auto', max_length=20, verbose_name='Theme Preference')),
                ('language_preference', models.CharField(choices=[('en', 'English'), ('bn', 'Bangla')], default='en', max_length=10, verbose_name='Language Preference')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('teacher', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='teachers.teacher')),
            ],
            options={
                'verbose_name': 'Teacher Settings',
                'verbose_name_plural': 'Teacher Settings',
            },
        ),
        migrations.CreateModel(
            name='TeacherSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Is Primary Subject')),
                ('expertise_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='intermediate', max_length=20, verbose_name='Expertise Level')),
                ('years_teaching', models.PositiveIntegerField(default=0, verbose_name='Years Teaching This Subject')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classes.subject', verbose_name='Subject')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='teachers.teacher')),
            ],
            options={
                'verbose_name': 'Teacher Subject',
                'verbose_name_plural': 'Teacher Subjects',
            },
        ),
        migrations.AddIndex(
            model_name='teacher',
            index=models.Index(fields=['teacher_id'], name='teachers_te_teacher_5d8d41_idx'),
        ),
        migrations.AddIndex(
            model_name='teacher',
            index=models.Index(fields=['employee_number'], name='teachers_te_employe_845041_idx'),
        ),
        migrations.AddIndex(
            model_name='teacher',
            index=models.Index(fields=['status'], name='teachers_te_status_cc7a79_idx'),
        ),
        migrations.AddIndex(
            model_name='teacher',
            index=models.Index(fields=['department'], name='teachers_te_departm_3b845d_idx'),
        ),
        migrations.AddIndex(
            model_name='teacher',
            index=models.Index(fields=['employment_type'], name='teachers_te_employm_91298c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='teacherattendance',
            unique_together={('teacher', 'date')},
        ),
        migrations.AlterUniqueTogether(
            name='teacherclass',
            unique_together={('teacher', 'class_obj', 'academic_year')},
        ),
        migrations.AlterUniqueTogether(
            name='teacherperformance',
            unique_together={('teacher', 'academic_year', 'evaluation_period')},
        ),
        migrations.AlterUniqueTogether(
            name='teachersalary',
            unique_together={('teacher', 'month', 'year')},
        ),
        migrations.AlterUniqueTogether(
            name='teachersubject',
            unique_together={('teacher', 'subject')},
        ),
    ]
